# IMPORT C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT
import os
import time
import logging
import threading
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from time import sleep
import telebot
import sys
import pyperclip
from selenium.common.exceptions import NoSuchElementException
logging.basicConfig(level=logging.CRITICAL)  # Ch·ªâ in th√¥ng b√°o l·ªói nghi√™m tr·ªçng
import datetime
now = datetime.datetime.now()
from selenium.common.exceptions import TimeoutException
from telebot import types
from dylib import dylib

# KHAI B√ÅO APT TOKEN BOT TELEGRAM
API_TOKEN = '7371036517:AAEB8PtQRtSrvDOxQUUW2su7ObGso6ltq8w'  # TOKEN C·ª¶A BOT
bot = telebot.TeleBot(API_TOKEN)

user_id = '5634845912' # ID C·ª¶A NG∆Ø·ªúI D√ôNG

########################### B·∫ÆT ƒê·∫¶U C√ÅC CH·ª®C NƒÇNG C·ª¶A BOT ###########################
print(f"============= | KH·ªûI ƒê·ªòNG BOT LIVESTREAM TH√ÄNH C√îNG | =============")

# CH·ª®C NƒÇNG /START
start = telebot.types.ReplyKeyboardMarkup(True).add("ƒê·ªïi IP").add("M·ªü live").add("T·∫Øt live")
@bot.message_handler(commands=['start'])
def handle_start(message):
    text = "CH√ÄO M·ª™NG B·∫†N QUAY L·∫†I BOT, CH√öC B·∫†N NG√ÄY M·ªöI VUI V·∫∫"
    bot.send_message(message.chat.id, text, reply_markup=start)

# CH·ª®C NƒÇNG ƒê·ªîI IP
@bot.message_handler(func=lambda message: message.text == "ƒê·ªïi IP")
def handle_doiip(message):
    from doiip.doiip import ask_select_account_doiip
    from doiip.doiip import doiip_main
    ask_select_account_doiip(message)
    bot.register_next_step_handler(message, doiip_main)

# CH·ª®C NƒÇNG T·∫ÆT LIVE
@bot.message_handler(func=lambda message: message.text == "T·∫Øt live")
def handle_tatlive(message):
    from tatlive.tatlive import xacnhan_tatlive
    from tatlive.tatlive import main_tatlive

    xacnhan_tatlive(message)
    bot.register_next_step_handler(message, main_tatlive)

# CH·ª®C NƒÇNG M·ªû LIVE
@bot.message_handler(func=lambda message: message.text == "M·ªü live")
def select_molive(message):
    select_molive_button = types.ReplyKeyboardMarkup(True).add('Nick Ch√≠nh VƒÉn B·∫£o').add('Nick Ph·ª• LBH').add("Nick Meme L·ªè").add('Tr·ªü l·∫°i menu ch√≠nh')
    text = "Vui l√≤ng ch·ªçn t√†i kho·∫£n c·∫ßn m·ªü live"
    bot.send_message(message.chat.id, text, reply_markup=select_molive_button)

# M·ªû LIVE VƒÇN B·∫¢O
@bot.message_handler(func=lambda message: message.text == "Nick Ch√≠nh VƒÉn B·∫£o")
def handle_molivevanbao(message):
    from molive.molive_vanbao import ask_source_live_vanbao, main_molive_vanbao
    ask_source_live_vanbao(message)
    bot.register_next_step_handler(message, main_molive_vanbao)

# M·ªû LIVE NICK PH·ª§ LBH
@bot.message_handler(func=lambda message: message.text == "Nick Ph·ª• LBH")
def handle_molivenickphulbh(message):
    from molive.molive_nickphulbh import ask_source_live_nickphulbh, main_molive_nickphulbh
    ask_source_live_nickphulbh(message)
    bot.register_next_step_handler(message, main_molive_nickphulbh)

# M·ªû LIVE MEME L·ªé
@bot.message_handler(func=lambda message: message.text == "Nick Meme L·ªè")
def handle_molivenickphulbh(message):
    from molive.molive_memelo import ask_source_live_memelo, main_molive_memelo
    ask_source_live_memelo(message)
    bot.register_next_step_handler(message, main_molive_memelo)   

# TR·ªû L·∫†I MENU CH√çNH
@bot.message_handler(func=lambda message: message.text == "Tr·ªü l·∫°i menu ch√≠nh")
def handle_back_home(message):
    back_home(message)

def back_home(message):
    text = "VUI L√íNG CH·ªåN üëá"
    bot.send_message(message.chat.id, text, reply_markup=start)

########################################################
####################### CH·∫†Y BOT #######################
########################################################
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.exception("L·ªñI")
        time.sleep(5)