# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import os
import time
import logging
import threading
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from time import sleep
import telebot
import sys
import pyperclip
from selenium.common.exceptions import NoSuchElementException
logging.basicConfig(level=logging.CRITICAL)
import datetime
from selenium.common.exceptions import TimeoutException
from colorama import Fore, Style, init
from telebot import types

# BI·∫æN L·∫§Y NG√ÄY GI·ªú HI·ªÜN T·∫†I C·ª¶A H·ªÜ TH·ªêNG
now = datetime.datetime.now()

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp chromedriver.exe cho Selenium WebDriver
chromedriver_path = r'D:\\BOT_TELE_AUTO_WORK\\BOT LIVE THU CONG\\chrome_driver\\chromedriver.exe'

# C·∫•u h√¨nh chrome driver
options = Options()
options.add_argument('--log-level=3')  # V√¥ hi·ªáu h√≥a th√¥ng b√°o c·ªßa Selenium
options.add_argument('--user-data-dir=D:\\BOT_TELE_AUTO_WORK\\BOT LIVE THU CONG\\du lieu trinh duyet')

service = Service(chromedriver_path)
service_log_path = os.path.devnull
service = Service(chromedriver_path, service_log_path=service_log_path)

# Nh·∫≠p ch·ª©c nƒÉng bot ph·∫£n h·ªìi l·∫°i ng∆∞·ªùi d√πng
from dylib.dylib import bot_reply

# Nh·∫≠p c√°c h√†m th·ª±c hi·ªán vi·ªác in ra m√†n h√¨nh
from print_logger.print_logger import log_info, log_warning, log_error, log_success

# Khai b√°o API token telegram
API_TOKEN = '7329003333:AAF7GhjivbGnk0jSGE8XfefFh_-shHAFsGc'  # Thay token c·ªßa bot v√†o ƒë√¢y
bot = telebot.TeleBot(API_TOKEN)

# Nh·∫≠p gi√° tr·ªã c·ªßa user_id ADMIN v√† user_name c·ªßa ADMIN t·ª´ file dylib trong folder dylib
from dylib.dylib import user_id
from dylib.dylib import username

# Kh·ªüi t·∫°o bi·∫øn ip v√† device v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† None
ip = None
device = None

# TR·ªû V·ªÄ MENU CH√çNH
@bot.message_handler(func=lambda message: message.text in ["Tr·ªü l·∫°i menu ch√≠nh", "Kh√¥ng, tr·ªü v·ªÅ menu ch√≠nh"])
def back_home(message):
    # T·∫†O N√öT TR·ªû V·ªÄ MENU CH√çNH
    button_back_home = telebot.types.ReplyKeyboardMarkup(True).add("ƒê·ªïi IP").add("M·ªü live").add("T·∫Øt live").add("Check view")
    text = "VUI L√íNG CH·ªåN üëá"
    bot.send_message(message.chat.id, text, reply_markup=button_back_home) 

# H√†m y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªçn t√†i kho·∫£n c·∫ßn ƒë·ªïi IP
def ask_select_account_doiip(message):
    # T·∫†O N√öT CH·ªåN T√ÄI KHO·∫¢N C·∫¶N ƒê·ªîI IP
    button_select_account_doiip = telebot.types.ReplyKeyboardMarkup(True).add("ƒê·ªïi IP Nick VƒÉn B·∫£o").add("ƒê·ªïi IP Nick Ph·ª• LBH").add("ƒê·ªïi IP Nick Meme L·ªè").add("Tr·ªü l·∫°i menu ch√≠nh")

    # Y√äU C·∫¶U NG∆Ø·ªúI D√ôNG CH·ªåN T√ÄI KHO·∫¢N C·∫¶N ƒê·ªîI IP
    log_info(f"ƒêang ƒë·ª£i ng∆∞·ªùi d√πng {username} ch·ªçn t√†i kho·∫£n c·∫ßn ƒë·ªïi IP")
    bot.send_message(message.chat.id, "B·∫°n mu·ªën ƒë·ªïi IP t√†i kho·∫£n n√†o?", reply_markup=button_select_account_doiip)

    # Ch·∫°y h√†m doiip
    bot.register_next_step_handler(message, doiip_main)   

def doiip_main(message):
    from dylib.dylib import close_existing_browser # Nh·∫≠p h√†m ƒë√≥ng t·∫•t c·∫£ c√°c phi√™n tr√¨nh duy·ªát chrome ƒëang ch·∫°y
    global ip
    global device

    if message.text == "ƒê·ªïi IP Nick VƒÉn B·∫£o":
        ip = "ip-22680"
        device = "renew-22680"
        log_info(f"Ng∆∞·ªùi d√πng {username} ƒë√£ ch·ªçn ƒê·ªïi IP Nick VƒÉn B·∫£o")
        bot_reply(user_id, "Ti·∫øn h√†nh ƒë·ªïi IP & Thi·∫øt B·ªã cho Nick VƒÉn B·∫£o")
    elif message.text == "ƒê·ªïi IP Nick Ph·ª• LBH":
        ip = "ip-22679"
        device = "renew-22679"
        log_info(f"Ng∆∞·ªùi d√πng {username} ƒë√£ ch·ªçn ƒê·ªïi IP Nick Ph·ª• LBH")
        bot_reply(user_id, "Ti·∫øn h√†nh ƒë·ªïi IP & Thi·∫øt B·ªã cho Nick Ph·ª• LBH")
    elif message.text == "ƒê·ªïi IP Nick Meme L·ªè":
        ip = "ip-22733"
        device = "renew-22733"
        log_info(f"Ng∆∞·ªùi d√πng {username} ƒë√£ ch·ªçn ƒê·ªïi IP Nick Meme L·ªè")
        bot_reply(user_id, "Ti·∫øn h√†nh ƒë·ªïi IP & Thi·∫øt B·ªã cho Nick Meme L·ªè")
    elif message.text == "Tr·ªü l·∫°i menu ch√≠nh":
        log_info(f"Ng∆∞·ªùi d√πng {username} ƒë√£ ch·ªçn Tr·ªü L·∫°i Menu Ch√≠nh")
        back_home(message)
        return

    log_info("ƒêang ch·∫°y h√†m ki·ªÉm tra c√°c phi√™n tr√¨nh duy·ªát ƒëang ch·∫°y, n·∫øu c√≥ phi√™n tr√¨nh duy·ªát n√†o ƒëang ƒë∆∞·ª£c s·∫Ω ƒë√≥ng tr√¨nh duy·ªát")
    close_existing_browser() # ƒê√≥ng t·∫•t c·∫£ c√°c phi√™n tr√¨nh duy·ªát ƒëang ch·∫°y
    # Kh·ªüi t·∫°o chrome driver
    driver = webdriver.Chrome(service=service, options=options)
    log_info("Kh·ªüi t·∫°o chrome driver")

    try:
        log_info("M·ªü trang web livestream") ; bot_reply(user_id, "M·ªü trang web livestream")

        # M·ªü trang web livestream
        driver.get('https://autolive.me/tiktok')

        log_info("ƒêang load trang web livestream") ; bot_reply(user_id, "ƒêang load trang web livestream...")

        # Ki·ªÉm tra xem trang web load xong ch∆∞a
        WebDriverWait(driver, 100).until(EC.presence_of_element_located((By.XPATH, '/html/body/div[1]/div[3]/div/div/div[1]/div[1]/div/div[2]/h3/b')))

        log_success("Load trang web livestream th√†nh c√¥ng") ; bot_reply(user_id, "Load trang web livestream th√†nh c√¥ng")
    except TimeoutError:
        log_error("Load trang web livestream th·∫•t b·∫°i") ; bot_reply(user_id, "Load trang web livestream th·∫•t b·∫°i\nNguy√™n nh√¢n: ƒë∆∞·ªùng truy·ªÅn internet qu√° y·∫øu ho·∫∑c trang web s·ª≠ d·ª•ng bƒÉng th√¥ng n∆∞·ªõc ngo√†i")

        # ƒê√ìNG CHROME
        driver.quit()
        log_info("ƒê√≥ng tr√¨nh duy·ªát chrome")

        # K·∫æT TH√öC TI·∫æN TR√åNH
        log_info("K·∫øt th√∫c ti·∫øn tr√¨nh hi·ªán t·∫°i")
        return
    
    # try:
    #     log_info("ƒêang ƒë·ª£i th√¥ng b√°o gia h·∫°n xu·∫•t hi·ªán")
    #     # ƒê·ª£i th√¥ng b√°o gia h·∫°n xu·∫•t hi·ªán
    #     WebDriverWait(driver, 3).until(EC.presence_of_element_located((By.XPATH, '/html/body/div[1]/div[3]/div[2]/div/div/div')))

    #     log_success("Th√¥ng b√°o gia h·∫°n ƒë√£ xu·∫•t hi·ªán")

    #     log_info("T·∫Øt th√¥ng b√°o gia h·∫°n")
    #     driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div[2]/div/div/div/div[1]/button").click()

    # except TimeoutException:
    #     log_error("Kh√¥ng c√≥ th√¥ng b√°o gia h·∫°n")

    # try:
    #     log_info("ƒêang ƒë·ª£i th√¥ng b√°o gia h·∫°n xu·∫•t hi·ªán")
    #     # ƒê·ª£i th√¥ng b√°o gia h·∫°n xu·∫•t hi·ªán
    #     WebDriverWait(driver, 3).until(EC.presence_of_element_located((By.XPATH, '/html/body/div[1]/div[3]/div[3]/div/div/div')))

    #     log_success("Th√¥ng b√°o gia h·∫°n ƒë√£ xu·∫•t hi·ªán")

    #     log_info("T·∫Øt th√¥ng b√°o gia h·∫°n")
    #     driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div[3]/div/div/div/div[1]/button").click()

    # except TimeoutException:
    #     log_error("Kh√¥ng c√≥ th√¥ng b√°o gia h·∫°n")

    # Click v√†o n√∫t ƒê·ªïi TK Web
    log_info("Click v√†o n√∫t ƒê·ªïi TK Web")
    driver.find_element(By.CSS_SELECTOR, "#formLive > div:nth-child(3) > div.col-md-3 > div > div > button:nth-child(2) > i").click()

    # ƒê·ª£i giao di·ªán sau khi click v√†o n√∫t ƒê·ªïi TK Web xu·∫•t hi·ªán
    WebDriverWait(driver, 100).until(EC.presence_of_element_located((By.CSS_SELECTOR, "#dialog_tiktok > div > div > div")))

    # Bi·∫øn ch·ª©a script th·ª±c hi·ªán vi·ªác click v√†o n√∫t ƒë·ªïi IP
    change_ip = f'document.getElementById("{ip}").click();'
    # CLICK V√ÄO N√öT ƒê·ªîI IP
    driver.execute_script(change_ip)

    bot_reply(user_id, "ƒêang ƒë·ªïi IP...")
    log_info("ƒêang ƒë·ªïi IP...")
    # Ch·ªù cho trang web ƒë·ªïi IP
    WebDriverWait(driver, 100).until(EC.presence_of_element_located((By.CSS_SELECTOR, "body > div.notifyjs-corner > div > div.notifyjs-container > div")))

    # L·∫•y d·ªØ li·ªáu c·ªßa th√¥ng b√°o web livestream sau khi click v√†o n√∫t ƒë·ªïi IP
    data_notify_after_changeip = driver.execute_script('''
        // JavaScript code here
        // ƒêo·∫°n m√£ JavaScript ƒë·ªÉ l·∫•y n·ªôi dung c·ªßa ph·∫ßn t·ª≠
        var element = document.querySelector('div.text[data-notify-html="text"]');
        return element.textContent;
    ''')
    # Ki·ªÉm tra xem c√≥ ƒë·ªïi IP th√†nh c√¥ng hay kh√¥ng
    if data_notify_after_changeip == "Th√†nh c√¥ng":
        log_success("ƒê·ªïi IP th√†nh c√¥ng") ; bot_reply(user_id, "ƒê·ªïi IP th√†nh c√¥ng")
    else:
        log_error(f"ƒê·ªïi IP th·∫•t b·∫°i - Nguy√™n nh√¢n: {data_notify_after_changeip}")
        bot_reply(user_id, f"ƒê·ªïi IP th·∫•t b·∫°i - {data_notify_after_changeip}")

    # ƒê·ªïi thi·∫øt b·ªã
    log_info("L√†m m·ªõi l·∫°i trang web livestream")
    driver.refresh() # L√†m m·ªõi l·∫°i trang web livestream

    # KI·ªÇM TRA S·ª∞ KI·ªÜN T·∫¢I L·∫†I TRANG C√ì TH√ÄNH C√îNG HAY KH√îNG
    try:
        # Ki·ªÉm tra xem trang web load xong ch∆∞a
        WebDriverWait(driver, 100).until(EC.presence_of_element_located((By.XPATH, '/html/body/div[1]/div[3]/div/div/div[1]/div[1]/div/div[2]/h3/b')))

        log_success("T·∫£i l·∫°i trang web livestream th√†nh c√¥ng")

        # try:
        #     log_info("ƒêang ƒë·ª£i th√¥ng b√°o gia h·∫°n xu·∫•t hi·ªán")
        #     # ƒê·ª£i th√¥ng b√°o gia h·∫°n xu·∫•t hi·ªán
        #     WebDriverWait(driver, 3).until(EC.presence_of_element_located((By.XPATH, '/html/body/div[1]/div[3]/div[2]/div/div/div')))

        #     log_success("Th√¥ng b√°o gia h·∫°n ƒë√£ xu·∫•t hi·ªán")

        #     log_info("T·∫Øt th√¥ng b√°o gia h·∫°n")
        #     driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div[2]/div/div/div/div[1]/button").click()

        # except TimeoutException:
        #     log_error("Kh√¥ng c√≥ th√¥ng b√°o gia h·∫°n")

        # try:
        #     log_info("ƒêang ƒë·ª£i th√¥ng b√°o gia h·∫°n xu·∫•t hi·ªán")
        #     # ƒê·ª£i th√¥ng b√°o gia h·∫°n xu·∫•t hi·ªán
        #     WebDriverWait(driver, 3).until(EC.presence_of_element_located((By.XPATH, '/html/body/div[1]/div[3]/div[3]/div/div/div')))

        #     log_success("Th√¥ng b√°o gia h·∫°n ƒë√£ xu·∫•t hi·ªán")

        #     log_info("T·∫Øt th√¥ng b√°o gia h·∫°n")
        #     driver.find_element(By.XPATH, "/html/body/div[1]/div[3]/div[3]/div/div/div/div[1]/button").click()

        # except TimeoutException:
        #     log_error("Kh√¥ng c√≥ th√¥ng b√°o gia h·∫°n")

    except TimeoutError:
        log_error("Load trang web livestream th·∫•t b·∫°i")

        # ƒê√ìNG CHROME
        driver.quit()
        log_info("ƒê√≥ng tr√¨nh duy·ªát chrome")

        # K·∫æT TH√öC TI·∫æN TR√åNH
        log_info("K·∫øt th√∫c ti·∫øn tr√¨nh hi·ªán t·∫°i")
        return

    # Click v√†o n√∫t ƒê·ªïi TK Web
    log_info("Click v√†o n√∫t ƒê·ªïi TK Web")
    driver.find_element(By.CSS_SELECTOR, "#formLive > div:nth-child(3) > div.col-md-3 > div > div > button:nth-child(2) > i").click()

    # ƒê·ª£i giao di·ªán sau khi click v√†o n√∫t ƒê·ªïi TK Web xu·∫•t hi·ªán
    WebDriverWait(driver, 100).until(EC.presence_of_element_located((By.CSS_SELECTOR, "#dialog_tiktok > div > div > div")))

    # Bi·∫øn ch·ª©a script th·ª±c hi·ªán vi·ªác click v√†o n√∫t ƒë·ªïi Thi·∫øt B·ªã
    changedevice = f'document.getElementById("{device}").click();'

    log_info("ƒêang ƒë·ªïi thi·∫øt b·ªã...")
    bot_reply(user_id, f"ƒêang ƒë·ªïi thi·∫øt b·ªã...")

    # Click v√†o n√∫t ƒë·ªïi Thi·∫øt B·ªã
    driver.execute_script(changedevice)

    # Ch·ªù cho trang web ƒë·ªïi Thi·∫øt B·ªã
    WebDriverWait(driver, 100).until(EC.presence_of_element_located((By.CSS_SELECTOR, "body > div.notifyjs-corner > div > div.notifyjs-container > div")))

    # L·∫•y d·ªØ li·ªáu c·ªßa th√¥ng b√°o web livestream sau khi click v√†o n√∫t ƒë·ªïi Thi·∫øt B·ªã
    data_notify_after_changedevice = driver.execute_script('''
        // JavaScript code here
        // ƒêo·∫°n m√£ JavaScript ƒë·ªÉ l·∫•y n·ªôi dung c·ªßa ph·∫ßn t·ª≠
        var element = document.querySelector('div.text[data-notify-html="text"]');
        return element.textContent;
    ''')

    if data_notify_after_changedevice == "Th√†nh c√¥ng":
        log_success("ƒê·ªïi Thi·∫øt B·ªã th√†nh c√¥ng") ; bot_reply(user_id, "ƒê·ªïi Thi·∫øt B·ªã th√†nh c√¥ng")

        ask_retry_doiip(message) # H√†m h·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng ho·∫∑c v·ªÅ menu ch√≠nh
        log_info("ƒêang h·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng hay v·ªÅ menu ch√≠nh")
        
        log_info("ƒê√≥ng tr√¨nh duy·ªát chrome")
        driver.quit()

        return

    else:
        log_error(f"ƒê·ªïi Thi·∫øt B·ªã th·∫•t b·∫°i - Nguy√™n nh√¢n: {data_notify_after_changedevice}")
        bot_reply(user_id, f"ƒê·ªïi Thi·∫øt B·ªã th·∫•t b·∫°i - {data_notify_after_changedevice}")

        ask_retry_doiip(message) # H√†m h·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng ho·∫∑c v·ªÅ menu ch√≠nh
        log_info("ƒêang h·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng hay v·ªÅ menu ch√≠nh")

        log_info("ƒê√≥ng tr√¨nh duy·ªát chrome")
        driver.quit()


        return
# H√†m h·ªèi ng∆∞·ªùi d√πng ti·∫øp t·ª•c ho·∫∑c tr·ªü l·∫°i menu ch√≠nh
def ask_retry_doiip(message):
    # T·∫†O N√öT H·ªéI NG∆Ø·ªúI D√ôNG C√ì MU·ªêN TH·ª¨ L·∫†I KH√îNG
    button_retry = telebot.types.ReplyKeyboardMarkup(True).add("C√≥, ti·∫øp t·ª•c ƒë·ªïi IP").add("Kh√¥ng, tr·ªü v·ªÅ menu ch√≠nh")
    bot.send_message(message.chat.id, "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c n·ªØa kh√¥ng?", reply_markup=button_retry)