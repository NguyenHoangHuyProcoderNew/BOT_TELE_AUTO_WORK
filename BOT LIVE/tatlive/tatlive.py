# IMPORT C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT
import os
import time
import logging
import threading
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from time import sleep
import telebot
import sys
import pyperclip
from selenium.common.exceptions import NoSuchElementException
logging.basicConfig(level=logging.CRITICAL)  # Ch·ªâ in th√¥ng b√°o l·ªói nghi√™m tr·ªçng
import datetime
now = datetime.datetime.now()
from selenium.common.exceptions import TimeoutException
from colorama import Fore, Style, init
from telebot import types

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn chrome driver
chromedriver_path = r'D:\\BOT_TELE_AUTO_WORK\\BOT LIVE THU CONG\\chrome_driver\\chromedriver.exe'

# C·∫•u h√¨nh chrome driver
options = Options()
options.add_argument('--log-level=3')  # V√¥ hi·ªáu h√≥a th√¥ng b√°o c·ªßa Selenium
options.add_argument('--user-data-dir=D:\\BOT_TELE_AUTO_WORK\\BOT LIVE THU CONG\\du lieu trinh duyet')

service = Service(chromedriver_path)
service_log_path = os.path.devnull
service = Service(chromedriver_path, service_log_path=service_log_path)

# KHAI B√ÅO APT TOKEN BOT TELEGRAM
API_TOKEN = '7371036517:AAEB8PtQRtSrvDOxQUUW2su7ObGso6ltq8w'  # TOKEN C·ª¶A BOT
bot = telebot.TeleBot(API_TOKEN)

# C√ÅC CH·ª®C NƒÇNG IN RA M√ÄN H√åNH
from print_logger.print_logger import log_info, log_warning, log_error, log_success

# Nh·∫≠p ch·ª©c nƒÉng bot ph·∫£n h·ªìi l·∫°i ng∆∞·ªùi d√πng
from dylib.dylib import bot_reply

from dylib.dylib import user_id
from dylib.dylib import username

########## TR·ªû V·ªÄ MENU CH√çNH #########
home = telebot.types.ReplyKeyboardMarkup(True).add("ƒê·ªïi IP").add("M·ªü live").add("T·∫Øt live").add("Check view")
def back_home(message):
    text = "VUI L√íNG CH·ªåN üëá"
    bot.send_message(message.chat.id, text, reply_markup=home)

# H√†m x√°c nh·∫≠n t·∫Øt live
def xacnhan_tatlive(message):
    # T·∫°o n√∫t x√°c nh·∫≠n t·∫Øt live
    xacnhantatlive = telebot.types.ReplyKeyboardMarkup(True)
    xacnhantatlive.add('C√≥', 'Kh√¥ng').add('Tr·ªü l·∫°i menu ch√≠nh')
    log_info(f"Bot ƒëang y√™u c·∫ßu ng∆∞·ªùi d√πng {username} x√°c nh·∫≠n t·∫Øt phi√™n live")
    bot.send_message(message.chat.id, "X√°c nh·∫≠n t·∫Øt phi√™n live hi·ªán t·∫°i?", reply_markup=xacnhantatlive)

    # Sau khi ng∆∞·ªùi d√πng x√°c nh·∫≠n g·ªçi h√†m main_tatlive ƒë·ªÉ x·ª≠ l√Ω
    bot.register_next_step_handler(message, main_tatlive)

# H√ÄM TH·ª∞C HI·ªÜN VI·ªÜC T·∫ÆT LIVE
def main_tatlive(message):
    if message.text == "C√≥":
        log_info("Ng∆∞·ªùi d√πng ƒë√£ x√°c nh·∫≠n t·∫Øt phi√™n live")

        log_info("Kh·ªüi t·∫°o chrome driver")
        driver = webdriver.Chrome(service=service, options=options)
        
        bot_reply(user_id, "Ti·∫øn h√†nh m·ªü trang web livestream")
        log_info("ƒêang m·ªü trang web livestream")
        driver.get('https://autolive.me/tiktok')

        try:
            bot_reply(user_id, "ƒêang load trang web livestream...")
            log_info("ƒêang load trang web livestream")

            WebDriverWait(driver, 100).until(
                EC.presence_of_element_located((By.XPATH, '/html/body/div[1]/div[3]/div/div/div[1]/div[1]/div/div[2]/h3/b'))
            )
            
            bot_reply(user_id, "Load trang web livestream th√†nh c√¥ng")
            log_success("Load trang web livestram th√†nh c√¥ng")
        except TimeoutError:
            bot_reply(user_id, "Load trang web livestream th·∫•t b·∫°i, vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng truy·ªÅn internet")
            log_error("X·∫£y ra l·ªói khi load trang web livestream, do s·ª± c·ªë ƒë∆∞·ªùng truy·ªÅn internet")

        bot_reply(user_id, "Ti·∫øn h√†nh t·∫Øt live")
        log_info("Ti·∫øn h√†nh t·∫Øt phi√™n live")

        try:
            button_tatlive = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "button[data-original-title='D·ª´ng live']"))
            )
            if button_tatlive.get_attribute("data-original-title") == "D·ª´ng live":
                log_info("Click v√†o n√∫t t·∫Øt live")
                bot_reply(user_id, "ƒêang t·∫Øt phi√™n live...")
                button_tatlive.click()
        except:
            bot_reply(user_id, "Hi·ªán kh√¥ng c√≥ phi√™n live n√†o ƒë∆∞·ª£c m·ªü")
            log_info("Hi·ªán kh√¥ng c√≥ phi√™n live n√†o ƒë∆∞·ª£c m·ªü")

            log_info("ƒê√≥ng tr√¨nh duy·ªát chrome")
            driver.quit()

            log_info("K·∫øt th√∫c ti·∫øn tr√¨nh")
            return

        log_info("ƒêang ki·ªÉm tra c√≥ t·∫Øt phi√™n live th√†nh c√¥ng hay kh√¥ng")

        # ƒê·ª£i th√¥ng b√°o sau khi t·∫Øt live xu·∫•t hi·ªán
        WebDriverWait(driver, 100).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'div > div.notifyjs-container > div'))
        )
            
        log_info("ƒêang l·∫•y d·ªØ li·ªáu th√¥ng b√°o c·ªßa web sau khi t·∫Øt live")
        notify_tatlive = driver.find_element(By.CSS_SELECTOR, 'div.text[data-notify-html="text"]')

        log_info("ƒêang chuy·ªÉn d·ªØ li·ªáu th√¥ng b√°o c·ªßa web sau khi t·∫Øt live th√†nh vƒÉn b·∫£n")
        data_notify_tatlive = notify_tatlive.text

        log_info("ƒêang ki·ªÉm tra d·ªØ li·ªáu th√¥ng b√°o c·ªßa web")
        if data_notify_tatlive == "Success":
            bot_reply(user_id, "T·∫Øt live th√†nh c√¥ng")
            log_success(f"Th√¥ng b√°o c·ªßa web l√† {data_notify_tatlive} - T·∫Øt live th√†nh c√¥ng")
        else:
            bot_reply(user_id, f"T·∫Øt live kh√¥ng th√†nh c√¥ng - Th√¥ng b√°o t·ª´ trang web: {data_notify_tatlive}")
            log_error(f"T·∫Øt live kh√¥ng th√†nh c√¥ng - Nguy√™n nh√¢n: {data_notify_tatlive}")
     
    elif message.text in ["Kh√¥ng", "Tr·ªü l·∫°i menu ch√≠nh"]:
        back_home(message)
